/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
uint16_t half_step[8]={0x08,0x0A,0x02,0x06,0x04,0x05,0x01,0x09};
/*uint32_t micro_step_arry_1[16] = {6419,13100,18995,24890,30785,36680,
															//9.8   20    29    38    47    56
																41265,46505,50435,54365,57640,60915,
	                            //63     71    77    83     88   93
																62618,64190,65172,65500};
														  //95.6   98   99.5   100
uint32_t micro_step_arry_2[16] = {65172,64190,62618,60915,
																//99.5    98    95.6  93
																57640,54365,50435,46505,41265,
																//88   83    77    71     63
																36680,30785,24890,18995,13100,6419,0};
															 //56    47    38    29    20    9.8  0 */
uint32_t micro_step_arry_1[8] = {20,38,56,70,83,92,98,100};
														  //95.6   98   99.5   100
uint32_t micro_step_arry_2[8] = {98,92,83,70,56,38,20,0};
															 //56    47    38    29    20    9.8  0 
uint16_t GPIO_arry[4] = {GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_3,GPIO_PIN_5};
//                         in1      in2         in3        in4

float dem = 0;

float rpm;

uint8_t state = 0;

uint8_t button_pin3 = 1;
uint8_t button_pin4 = 1;
uint8_t button_pin5 = 1;


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//-------------------------------------------vi_tri-----------------------------------------------------------------
int vi_tri(float vong)
{
	int dem_xung;
	dem_xung = vong * 200;
	return dem_xung;
}
//---------------------------------------------full_step_1_pha------------------------------------------------------------------
void full_step_1_cw(float rpm)
{
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);// bat max xung
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
	float t;
	t = ((60 / (rpm * 200) )* 1000000) / 10.0 ; // chia 10 do 1 tick la 10us 
	for(int i = 0; i < 8; i = i + 2)
	{
		for(int j = 0;j < 4; j++)
		{ 
				HAL_GPIO_WritePin(GPIOB,GPIO_arry[j],half_step[i] << (j + 4) & 0x80);
		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
		while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		dem = dem + 1;
	}
}

void full_step_1_ccw(float rpm)
{
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
	float t;
	t = ((60 / (rpm * 200) )* 1000000) / 10.0 ; 
	for(int j = 0;j < 4; j++)
	{ 
				HAL_GPIO_WritePin(GPIOB,GPIO_arry[j],half_step[0] << (j + 4) & 0x80);
	}
	__HAL_TIM_SET_COUNTER(&htim2,0);
	while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
	dem = dem + 1;
	for(int i = 6; i > 0; i = i - 2)
	{
		for(int j = 0;j < 4; j++)
		{ 
				HAL_GPIO_WritePin(GPIOB,GPIO_arry[j],half_step[i] << (j + 4) & 0x80);
		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
		while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		dem = dem + 1;
	}
}
//-----------------------------------------------full_step_2_pha--------------------------------------------------------------
void full_step_2_cw(float rpm)
{
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);// bat max xung
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
	float t;
	t = ((60 / (rpm * 200) )* 1000000) / 10.0 ; // half step la 400 
	for(int i = 1; i < 8; i = i + 2)
	{
		for(int j = 0;j < 4; j++)
		{ 
				HAL_GPIO_WritePin(GPIOB,GPIO_arry[j],half_step[i] << (j + 4) & 0x80);
		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
		while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		dem = dem + 1;
	}
}

void full_step_2_ccw(float rpm)
{
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
	float t;
	t = ((60 / (rpm * 200) )* 1000000) / 10.0 ; 
	for(int j = 0;j < 4; j++)
	{ 
				HAL_GPIO_WritePin(GPIOB,GPIO_arry[j],half_step[1] << (j + 4) & 0x80);
	}
	__HAL_TIM_SET_COUNTER(&htim2,0);
	while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
	dem = dem + 1;
	for(int i = 7; i > 0; i = i - 2)
	{
		for(int j = 0;j < 4; j++)
		{ 
				HAL_GPIO_WritePin(GPIOB,GPIO_arry[j],half_step[i] << (j + 4) & 0x80);
		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
		while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		dem = dem + 1;
	}
}
//-------------------------------------------------half_step--------------------------------------------------------------
void half_step_cw(float rpm)
{
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);// bat max xung
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
	float t;
	t = ((60 / (rpm * 400) )* 1000000) / 10.0 ; // half step la 400 
	for(int i = 0; i < 8; i = i + 1)
	{
		for(int j = 0;j < 4; j++)
		{ 
				HAL_GPIO_WritePin(GPIOB,GPIO_arry[j],half_step[i] << (j + 4) & 0x80);
		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
		while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		dem = dem + 0.5;
	}
}

void half_step_ccw(float rpm)
{
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);// bat max xung
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
	float t;
	t = ((60 / (rpm * 400) )* 1000000) / 10.0 ; // half step la 400 
	for(int j = 0;j < 4; j++)
	{ 
				HAL_GPIO_WritePin(GPIOB,GPIO_arry[j],half_step[0] << (j + 4) & 0x80);
	}
	__HAL_TIM_SET_COUNTER(&htim2,0);
	while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
	dem = dem + 0.5;
	for(int i = 7; i > 0; i = i - 1)
	{
		for(int j = 0;j < 4; j++)
		{ 
				HAL_GPIO_WritePin(GPIOB,GPIO_arry[j],half_step[i] << (j + 4) & 0x80);
		}
		__HAL_TIM_SET_COUNTER(&htim2,0);
		while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		dem = dem + 0.5;
	}
}
//-----------------------------------------------------micro_step--------------------------------------------------------------
void micro_step(float rpm)
{
		float t;
		t = ((60 / (rpm * 1600) )* 1000000) / 10.0 ; 
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
		for(int i = 0;i < 4; i++)
		{ 
					HAL_GPIO_WritePin(GPIOB,GPIO_arry[i],half_step[1] << (i + 4) & 0x80);
		}
		for(int i = 0; i < 8; i++)
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,micro_step_arry_1[i]);
			__HAL_TIM_SET_COUNTER(&htim2,0);
			while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		}
		for(int i = 0; i < 8 ; i++)
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,micro_step_arry_2[i]);
			__HAL_TIM_SET_COUNTER(&htim2,0);
			while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		}
		dem = dem + 1;
		
		for(int i = 0;i < 4; i++)
		{ 
					HAL_GPIO_WritePin(GPIOB,GPIO_arry[i],half_step[3] << (i + 4) & 0x80);
		}
		for(int i = 0; i < 8; i++)
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,micro_step_arry_1[i]);
			__HAL_TIM_SET_COUNTER(&htim2,0);
			while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		}
		for(int i = 0; i < 8 ; i++)
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,micro_step_arry_2[i]);
			__HAL_TIM_SET_COUNTER(&htim2,0);
			while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		}
		dem = dem + 1;
		
		for(int i = 0;i < 4; i++)
		{ 
					HAL_GPIO_WritePin(GPIOB,GPIO_arry[i],half_step[5] << (i + 4) & 0x80);
		}
		for(int i = 0; i < 8; i++)
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,micro_step_arry_1[i]);
			__HAL_TIM_SET_COUNTER(&htim2,0);
			while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		}
		for(int i = 0; i < 8 ; i++)
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,micro_step_arry_2[i]);
			__HAL_TIM_SET_COUNTER(&htim2,0);
			while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		}
		dem = dem + 1;
		
		for(int i = 0;i < 4; i++)
		{ 
					HAL_GPIO_WritePin(GPIOB,GPIO_arry[i],half_step[7] << (i + 4) & 0x80);
		}
		for(int i = 0; i < 8; i++)
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,micro_step_arry_1[i]);
			__HAL_TIM_SET_COUNTER(&htim2,0);
			while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		}
		for(int i = 0; i < 8 ; i++)
		{
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,micro_step_arry_2[i]);
			__HAL_TIM_SET_COUNTER(&htim2,0);
			while(__HAL_TIM_GET_COUNTER(&htim2) < t) {}
		}
		dem = dem + 1;
}
//-------------------------------------Read_button-------------------------------------------------
void button_che_do()
{
	switch (state)
	{
		case 0:
				state = 1;
				break;
		case 1:
				state = 2;
				break;
		case 2:
				state = 3;
				break;
		case 3:
				state = 4;
				break;
		case 4:
				state = 0;
				break;
	}
}
void button_tang_rpm()
{
		rpm = rpm + 5;
}
void button_giam_rpm()
{
		rpm = rpm - 5;
		if(rpm <= 0) rpm = 0;
}
void button()
{
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3) == 0 && button_pin3 == 1 )
	{
			button_che_do();
			button_pin3 = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3);
	}
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) == 0 && button_pin4 == 1 )
	{
			button_tang_rpm();
			button_pin4 = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4);
	}
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5) == 0 && button_pin5 == 1 )
	{
			button_giam_rpm();
			button_pin5 = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
	}
	button_pin3 = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3);
	button_pin4 = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4);
	button_pin5 = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
	// timer 1 dieu che xung
	// timer 2 dung de tinh toan thoi gian
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
	HAL_TIM_Base_Start(&htim2);
	HAL_TIM_Base_Start(&htim1);

	float vong;
	vong = 10;
	rpm = 10;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
		
    /* USER CODE BEGIN 3 */ 

		//full_step_1_ccw(rpm);
		//if(dem >= vi_tri(vong)) break ;
	button();
	switch (state)
	{
		case 0:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,0); // in1
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,0); // in2
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0); //in3
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,0); //in4
				break;
		case 1:
				//vong = 1;
				full_step_1_cw(rpm);
				//if(dem >= vi_tri(vong))
				//{
				//	dem = 0;
				//	state = 0;
				//}
				break;
		case 2:
				//vong = 1;
				full_step_2_cw(rpm);
				//if(dem >= vi_tri(vong))
				//{
				//	dem = 0;
				//	state = 0;
				//}
				break;
		case 3:				
				//vong = 1;
				half_step_cw(rpm);
				//if(dem >= vi_tri(vong))
				//{
				//	dem = 0;
				//	state = 0;
				//}
				break;
		case 4:
				//vong = 1;
				micro_step(rpm);
				//if(dem >= vi_tri(vong))
				//{
				//	dem = 0;
				//	state = 0;
				//}
				break;
	}
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 79;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 99;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 79;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP ;// GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
